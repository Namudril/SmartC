import { CONTRACT } from '../index'

describe('optimzeVM:', () => {
    it('should optimize: all api EXT_FUN_DAT_2', () => {
        /* this is source code for test:
            #include APIFunctions\n#pragma verboseAssembly\n// #pragma optimizationLevel 3\n\nlong testID, a, b;\n\nswitch (testID) {\ncase 0: // Same content\n    Set_A1_A2(25, 13);\n    a=25;\n    b=13;\n    Set_A1_A2(a, b);\n    break;\ncase 1: // Same var\n    Set_A3_A4(a, b);\n    Set_A3_A4(a, b);\n    break;\ncase 2: // content+var\n    Set_B1_B2(25, b);\n    a=25;\n    Set_B1_B2(a, b);\n    break;\ncase 3: // var+content\n    Set_B3_B4(a, 13);\n    b=13;\n    Set_B3_B4(a, b);\n    break;\n}\n
        */
        const code = [
            '^declare r0',
            '^declare r1',
            '^declare r2',
            '^declare testID',
            '^declare a',
            '^declare b',
            '',
            '^comment line 7 switch (testID) {',
            'BZR $testID :__switch1_0',
            'SET @r0 #0000000000000001',
            'BEQ $testID $r0 :__switch1_1',
            'SET @r0 #0000000000000002',
            'BEQ $testID $r0 :__switch1_2',
            'SET @r0 #0000000000000003',
            'BEQ $testID $r0 :__switch1_3',
            'FIN',
            '^comment line 8 case 0: // Same content',
            '__switch1_0:',
            '^comment line 9     Set_A1_A2(25, 13);',
            'SET @r0 #0000000000000019',
            'SET @r1 #000000000000000d',
            'FUN set_A1_A2 $r0 $r1',
            '^comment line 10     a=25;',
            'SET @a #0000000000000019',
            '^comment line 11     b=13;',
            'SET @b #000000000000000d',
            '^comment line 12     Set_A1_A2(a, b);',
            'FUN set_A1_A2 $a $b',
            '^comment line 13     break;',
            'FIN',
            '^comment line 14 case 1: // Same var',
            '__switch1_1:',
            '^comment line 15     Set_A3_A4(a, b);',
            'FUN set_A3_A4 $a $b',
            '^comment line 16     Set_A3_A4(a, b);',
            'FUN set_A3_A4 $a $b',
            '^comment line 17     break;',
            'FIN',
            '^comment line 18 case 2: // content+var',
            '__switch1_2:',
            '^comment line 19     Set_B1_B2(25, b);',
            'SET @r0 #0000000000000019',
            'FUN set_B1_B2 $r0 $b',
            '^comment line 20     a=25;',
            'SET @a #0000000000000019',
            '^comment line 21     Set_B1_B2(a, b);',
            'FUN set_B1_B2 $a $b',
            '^comment line 22     break;',
            'FIN',
            '^comment line 23 case 3: // var+content',
            '__switch1_3:',
            '^comment line 24     Set_B3_B4(a, 13);',
            'SET @r0 #000000000000000d',
            'FUN set_B3_B4 $a $r0',
            '^comment line 25     b=13;',
            'SET @b #000000000000000d',
            '^comment line 26     Set_B3_B4(a, b);',
            'FUN set_B3_B4 $a $b',
            '^comment line 27     break;',
            'FIN'
        ]
        const optCode = [
            '^declare r0',
            '^declare r1',
            '^declare r2',
            '^declare testID',
            '^declare a',
            '^declare b',
            '',
            '^comment line 7 switch (testID) {',
            'BZR $testID :__switch1_0',
            'SET @r0 #0000000000000001',
            'BEQ $testID $r0 :__switch1_1',
            'SET @r0 #0000000000000002',
            'BEQ $testID $r0 :__switch1_2',
            'SET @r0 #0000000000000003',
            'BEQ $testID $r0 :__switch1_3',
            'FIN',
            '^comment line 8 case 0: // Same content',
            '__switch1_0:',
            '^comment line 9     Set_A1_A2(25, 13);',
            'SET @r0 #0000000000000019',
            'SET @r1 #000000000000000d',
            'FUN set_A1_A2 $r0 $r1',
            '^comment line 10     a=25;',
            'SET @a #0000000000000019',
            '^comment line 11     b=13;',
            'SET @b #000000000000000d',
            '^comment line 12     Set_A1_A2(a, b);',
            '^comment line 13     break;',
            'FIN',
            '^comment line 14 case 1: // Same var',
            '__switch1_1:',
            '^comment line 15     Set_A3_A4(a, b);',
            'FUN set_A3_A4 $a $b',
            '^comment line 16     Set_A3_A4(a, b);',
            '^comment line 17     break;',
            'FIN',
            '^comment line 18 case 2: // content+var',
            '__switch1_2:',
            '^comment line 19     Set_B1_B2(25, b);',
            'SET @r0 #0000000000000019',
            'FUN set_B1_B2 $r0 $b',
            '^comment line 20     a=25;',
            'SET @a #0000000000000019',
            '^comment line 21     Set_B1_B2(a, b);',
            '^comment line 22     break;',
            'FIN',
            '^comment line 23 case 3: // var+content',
            '__switch1_3:',
            '^comment line 24     Set_B3_B4(a, 13);',
            'SET @r0 #000000000000000d',
            'FUN set_B3_B4 $a $r0',
            '^comment line 25     b=13;',
            'SET @b #000000000000000d',
            '^comment line 26     Set_B3_B4(a, b);',
            '^comment line 27     break;',
            'FIN'
        ]
        const result = new CONTRACT(code).optimize()
        expect(result).toEqual(optCode)
    })
    it('should optimize: EXT_FUN_RET Get_[AB1-4]', () => {
        /* this is source code for test:
            #include APIFunctions\n#pragma verboseAssembly\n// #pragma optimizationLevel 3\n\nlong testID, a, b;\n\nswitch (testID) {\ncase 0: // Same content\n    Set_A1_A2(1, 5);\n    Set_A3_A4(2, 6);\n    a=1;\n    a=Get_A1();\n    a=5;\n    a=Get_A2();\n    a=2;\n    a=Get_A3();\n    a=6;\n    a=Get_A4();\n    break;\ncase 1: // Same var\n    Set_B1_B2(a, b);\n    Set_B3_B4(a, b);\n    a=Get_B1();\n    b=Get_B2();\n    a=Get_B3();\n    b=Get_B4();\n    break;\ncase 2: // get+set\n    a=Get_B1();\n    b++;\n    Set_B1(a);\n    break;\n}\n
        */
        const code = [
            '^declare r0',
            '^declare r1',
            '^declare r2',
            '^declare testID',
            '^declare a',
            '^declare b',
            '',
            '^comment line 7 switch (testID) {',
            'BZR $testID :__switch1_0',
            'SET @r0 #0000000000000001',
            'BEQ $testID $r0 :__switch1_1',
            'SET @r0 #0000000000000002',
            'BEQ $testID $r0 :__switch1_2',
            'FIN',
            '^comment line 8 case 0: // Same content',
            '__switch1_0:',
            '^comment line 9     Set_A1_A2(1, 5);',
            'SET @r0 #0000000000000001',
            'SET @r1 #0000000000000005',
            'FUN set_A1_A2 $r0 $r1',
            '^comment line 10     Set_A3_A4(2, 6);',
            'SET @r0 #0000000000000002',
            'SET @r1 #0000000000000006',
            'FUN set_A3_A4 $r0 $r1',
            '^comment line 11     a=1;',
            'SET @a #0000000000000001',
            '^comment line 12     a=Get_A1();',
            'FUN @a get_A1',
            '^comment line 13     a=5;',
            'SET @a #0000000000000005',
            '^comment line 14     a=Get_A2();',
            'FUN @a get_A2',
            '^comment line 15     a=2;',
            'SET @a #0000000000000002',
            '^comment line 16     a=Get_A3();',
            'FUN @a get_A3',
            '^comment line 17     a=6;',
            'SET @a #0000000000000006',
            '^comment line 18     a=Get_A4();',
            'FUN @a get_A4',
            '^comment line 19     break;',
            'FIN',
            '^comment line 20 case 1: // Same var',
            '__switch1_1:',
            '^comment line 21     Set_B1_B2(a, b);',
            'FUN set_B1_B2 $a $b',
            '^comment line 22     Set_B3_B4(a, b);',
            'FUN set_B3_B4 $a $b',
            '^comment line 23     a=Get_B1();',
            'FUN @a get_B1',
            '^comment line 24     b=Get_B2();',
            'FUN @b get_B2',
            '^comment line 25     a=Get_B3();',
            'FUN @a get_B3',
            '^comment line 26     b=Get_B4();',
            'FUN @b get_B4',
            '^comment line 27     break;',
            'FIN',
            '^comment line 28 case 2: // get+set',
            '__switch1_2:',
            '^comment line 29     a=Get_B1();',
            'FUN @a get_B1',
            '^comment line 30     b++;',
            'INC @b',
            '^comment line 31     Set_B1(a);',
            'FUN set_B1 $a',
            '^comment line 32     break;',
            'FIN'
        ]
        const optCode = [
            '^declare r0',
            '^declare r1',
            '^declare r2',
            '^declare testID',
            '^declare a',
            '^declare b',
            '',
            '^comment line 7 switch (testID) {',
            'BZR $testID :__switch1_0',
            'SET @r0 #0000000000000001',
            'BEQ $testID $r0 :__switch1_1',
            'SET @r0 #0000000000000002',
            'BEQ $testID $r0 :__switch1_2',
            'FIN',
            '^comment line 8 case 0: // Same content',
            '__switch1_0:',
            '^comment line 9     Set_A1_A2(1, 5);',
            'SET @r0 #0000000000000001',
            'SET @r1 #0000000000000005',
            'FUN set_A1_A2 $r0 $r1',
            '^comment line 10     Set_A3_A4(2, 6);',
            'SET @r0 #0000000000000002',
            'SET @r1 #0000000000000006',
            'FUN set_A3_A4 $r0 $r1',
            '^comment line 11     a=1;',
            'SET @a #0000000000000001',
            '^comment line 12     a=Get_A1();',
            '^comment line 13     a=5;',
            'SET @a #0000000000000005',
            '^comment line 14     a=Get_A2();',
            '^comment line 15     a=2;',
            'SET @a #0000000000000002',
            '^comment line 16     a=Get_A3();',
            '^comment line 17     a=6;',
            'SET @a #0000000000000006',
            '^comment line 18     a=Get_A4();',
            '^comment line 19     break;',
            'FIN',
            '^comment line 20 case 1: // Same var',
            '__switch1_1:',
            '^comment line 21     Set_B1_B2(a, b);',
            'FUN set_B1_B2 $a $b',
            '^comment line 22     Set_B3_B4(a, b);',
            'FUN set_B3_B4 $a $b',
            '^comment line 23     a=Get_B1();',
            '^comment line 24     b=Get_B2();',
            '^comment line 25     a=Get_B3();',
            '^comment line 26     b=Get_B4();',
            '^comment line 27     break;',
            'FIN',
            '^comment line 28 case 2: // get+set',
            '__switch1_2:',
            '^comment line 29     a=Get_B1();',
            'FUN @a get_B1',
            '^comment line 30     b++;',
            'INC @b',
            '^comment line 31     Set_B1(a);',
            '^comment line 32     break;',
            'FIN'
        ]
        const result = new CONTRACT(code).optimize()
        expect(result).toEqual(optCode)
    })
    it('should optimize: Remaining EXT_FUN_RET and EXT_FUN_RET_DAT_2 ', () => {
        const code = [
            '^declare r0',
            '^declare r1',
            '^declare r2',
            '^declare testID',
            '^declare a',
            '^declare b',
            '',
            '^comment line 6 if (a) {',
            'BZR $a :__if1_endif',
            '^comment line 7     Set_B1(a);',
            'FUN set_B1 $a',
            '^comment line 8     a=Get_Activation_Fee();',
            'FUN @a Get_Activation_Fee',
            '^comment line 9     Set_B1(a);',
            'FUN set_B1 $a',
            '__if1_endif:',
            '^comment line 12 Set_B1_B2(b, a);',
            'FUN set_B1_B2 $b $a',
            '^comment line 13 a=Add_Minutes_To_Timestamp(testID, b);',
            'FUN @a add_Minutes_to_Timestamp $testID $b',
            '^comment line 14 Set_B1(b);',
            'FUN set_B1 $b',
            '^comment line 15 Set_B2(a);',
            'FUN set_B2 $a',
            'FIN'
        ]
        const optCode = [
            '^declare r0',
            '^declare r1',
            '^declare r2',
            '^declare testID',
            '^declare a',
            '^declare b',
            '',
            '^comment line 6 if (a) {',
            'BZR $a :__if1_endif',
            '^comment line 7     Set_B1(a);',
            'FUN set_B1 $a',
            '^comment line 8     a=Get_Activation_Fee();',
            'FUN @a Get_Activation_Fee',
            '^comment line 9     Set_B1(a);',
            'FUN set_B1 $a',
            '__if1_endif:',
            '^comment line 12 Set_B1_B2(b, a);',
            'FUN set_B1_B2 $b $a',
            '^comment line 13 a=Add_Minutes_To_Timestamp(testID, b);',
            'FUN @a add_Minutes_to_Timestamp $testID $b',
            '^comment line 14 Set_B1(b);',
            '^comment line 15 Set_B2(a);',
            'FUN set_B2 $a',
            'FIN'
        ]
        const result = new CONTRACT(code).optimize()
        expect(result).toEqual(optCode)
    })
})
